package br.edu.ufcg.srh.adicionais.server;

import java.util.Collection;

/**
 * 
 * @author Cleber Gon√ßalves de Sousa
 */
public final class Persistencia {
    private static Persistencia instancia;

    private DAO<Servidor> servidores;

    /**
     * Private constructor to avoid public instantiations.
     */
    private Persistencia() {
        this.servidores = new XmlDAOFactory().criarServidorDAO();
    }

    /**
     * Provides access to the unique instance of {@code Persistence}.
     * 
     * @return the unique instance of {@code Persistence}
     */
    public synchronized static Persistencia getInstancia() {
        if (instancia == null) {
            instancia = new Persistencia();
        }

        return instancia;
    }

    /**
     * Stores the given {@code operator} if it is not already stored.
     * 
     * @param operator the operator to store
     * @throws IllegalArgumentException if the given {@code operator} is {@code
     *         null}
     */
    public synchronized void inserirOperadora(Operadora operator) {
        this.servidores.add(operator);
    }

    /**
     * Stores the given {@code plan} if it is not already stored.
     * 
     * @param plan the plan to store
     * @throws IllegalArgumentException if the given {@code plan} is {@code
     *         null}
     */
    public synchronized void inserirPlano(Plano plan) {
        this.planos.add(plan);
    }

    /**
     * Stores the given {@code beneficiary} if it is not already stored.
     * 
     * @param beneficiary the beneficiary to store
     * @throws IllegalArgumentException if the given {@code beneficiary} is
     *         {@code null}
     */
    public synchronized void inserirBeneficiario(Beneficiario beneficiary) {
        this.beneficiarios.add(beneficiary);
    }

    public synchronized void inserirProcesso(Processo processo) {
        this.processos.add(processo);
    }

    /**
     * Stores the given {@code aid} if it is not already stored.
     * 
     * @param aid the aid to store
     * @throws IllegalArgumentException if the given {@code aid} is {@code null}
     */
    public synchronized void inserirAuxilio(Auxilio aid) {
        this.auxilios.add(aid);
    }

    public synchronized void inserirFeriado(Feriado f) {
        this.feriados.add(f);
    }

    public synchronized void inserirTabela(TabelaValoresPerCapita tvpc) {
    	this.tabelas.add(tvpc);
    }

    /**
     * Removes the operator with the given {@code id} if such entity is stored.
     * 
     * @param id the id of the operator to remove
     */
    public synchronized void removeOperator(Id id) {
        this.servidores.remove(this.getOperadora(id));
    }

    /**
     * Removes the plan with the given {@code id} if such entity is stored.
     * 
     * @param id the id of the plan to remove
     */
    public synchronized void removePlan(Id id) {
        this.planos.remove(this.getPlan(id));
    }

    /**
     * Removes the beneficiary with the given {@code id} if such entity is
     * stored.
     * 
     * @param id the id of the beneficiary to remove
     */
    public synchronized void removeBeneficiary(Id id) {
        this.beneficiarios.remove(this.getBeneficiary(id));
    }

    public synchronized void removeProcesso(Id id) {
        this.processos.remove(this.getProcesso(id));
    }

    /**
     * Removes the aid with the given {@code id} if such entity is stored.
     * 
     * @param id the id of the aid to remove
     */
    public synchronized void removeAid(Id id) {
        this.auxilios.remove(this.getAid(id));
    }

    public synchronized void removeFeriado(Id id) {
        this.feriados.remove(this.getFeriado(id));
    }

    public synchronized void removerTabela(Id id) {
    	this.tabelas.remove(this.getTabela(id));
    }

    /**
     * Updates the given {@code Operator} if such entity is stored.
     * 
     * @param operator the operator to update
     * @throws IllegalArgumentException if the given {@code operator} is {@code
     *         null}
     */
    public synchronized void updateOperator(Operadora operator) {
        this.servidores.update(operator);
        this.updateParentReferences(operator);
    }

    /**
     * Updates the given {@code plan} if such entity is stored.
     * 
     * @param plan the plan to update
     * @throws IllegalArgumentException if the given {@code plan} is {@code
     *         null}
     */
    public synchronized void updatePlan(Plano plan) {
        this.planos.update(plan);
        this.updateParentReferences(plan);
    }

    /**
     * Updates the given {@code beneficiary} if such entity is stored.
     * 
     * @param beneficiary the beneficiary to update
     * @throws IllegalArgumentException if the given {@code beneficiary} is
     *         {@code null}
     */
    public synchronized void updateBeneficiary(Beneficiario beneficiary) {
        this.beneficiarios.update(beneficiary);
        this.updateParentReferences(beneficiary);
    }

    public synchronized void updateProcesso(Processo processo) {
        this.processos.update(processo);
        this.updateParentReferences(processo);
    }

    /**
     * Updates the given {@code aid} if such entity is stored.
     * 
     * @param aid the aid to update
     * @throws IllegalArgumentException if the given {@code aid} is {@code null}
     */
    public synchronized void updateAid(Auxilio aid) {
        this.auxilios.update(aid);
    }

    public synchronized void updateFeriado(Feriado f) {
        this.feriados.update(f);
    }

    public synchronized void updateTabela(TabelaValoresPerCapita tvpc) {
    	this.tabelas.update(tvpc);
    }

    /**
     * Retrieves the operator with the given {@code id} if such entity is
     * stored.
     * 
     * @param id the id of the operator to retrieve
     * @return the operator with the given {@code id} or {@code null} if such
     *         entity is not stored
     */
    public synchronized Servidor getOperadora(Id id) {
        return this.servidores.get(id);
    }

    public synchronized Servidor getServidorPor(
            Especificacao<Servidor> specification) {
        return this.servidores.getBy(specification);
    }

    public synchronized Collection<Servidor> getTodosServidoresPor(
            Especificacao<Servidor> specification) {
        return this.servidores.getAllBy(specification);
    }

    public synchronized Collection<Servidor> getTodosServidores() {
        return this.servidores.getAll();
    }

    public synchronized Id novoIdServidor() {
        return this.servidores.getNewId();
    }
}
